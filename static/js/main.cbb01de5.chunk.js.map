{"version":3,"sources":["api/showtimes.jsx","api/reservation.jsx","styles/index.js","components/contexts/SeatsSelectedContext.js","components/contentViews/SearchBar.jsx","components/contentViews/movie/Movie.jsx","components/contentViews/movie/MovieList.jsx","components/contentViews/constants/index.js","components/contentViews/showtimes/Showtime.jsx","components/contentViews/showtimes/ShowtimeDateView.jsx","components/contentViews/showtimes/ShowtimeMonthView.jsx","components/contentViews/showtimes/ShowtimeList.jsx","components/contentViews/seats/IndividualSeat.jsx","components/contentViews/seats/Seats.jsx","components/contentViews/reservation/Reservation.jsx","components/contentViews/Content.jsx","components/contentViews/SeatSelectedContainer.jsx","components/contentViews/LoadingOverlay.jsx","components/App.jsx","theme/ThemeWrapper.jsx","index.js"],"names":["axios","create","baseURL","headers","Authorization","selectedMovieStyle","props","height","date","background","poster","borderTopLeftRadius","borderTopRightRadius","marginBottom","display","alignItems","position","offPositionStyling","seatsCount","bottom","left","width","minHeight","margin","zIndex","transform","reservationForm","flexFlow","positionStyle","justifyContent","alignContent","loadingOverlay","contentWrapper","selectedSeatsCount","pageView","landscapeView","window","innerHeight","innerWidth","padding","boxSizing","overflowY","formStyles","overflowDiv","overflow","rowStyles","borderSpacing","SeatsSelectedContext","createContext","SeatsSelectedContextProvider","state","seatsSelected","toggleSeatsBeingSelected","value","setState","seatsBeingSelected","onSeatSelect","seatSelected","onSeatRemove","filteredSeatsTakenArray","filter","seat","row","column","clearSelectedSeats","Provider","this","children","Component","SearchBar","citiesItems","onFormSubmit","event","preventDefault","context","onSubmit","term","handleFindCurrentLocation","navigator","geolocation","getCurrentPosition","isError","_","require","lat","coords","latitude","toFixed","lon","longitude","location","proximity","cities","map","city","id","Math","abs","closest","sortBy","successfulyLocated","handlePopulateSelect","sortedCities","MenuItem","key","button","name","componentDidMount","a","async","getCities","data","tooltipResolverBasedOnError","styleResolverBasedOnError","marginRight","color","iconResolverBasedOnError","style","className","Tooltip","title","Button","disabled","length","onClick","variant","size","FormControl","fullWidth","InputLabel","Select","onChange","e","target","marginLeft","React","contextType","Movie","onMovieSelect","movieName","movieId","moviePosterChecker","onSelect","Card","CardActionArea","CardMedia","component","image","CardContent","classes","root","Typography","gutterBottom","CardActions","MovieList","movies","movie","poster_image_thumbnail","moviesFoundCount","textAlign","src","alt","fontSize","monthNames","rowLetters","dateFormatted","Date","getMonth","getDate","toString","dateOrdinal","showTimeHourFormatted","showtimeHour","getHours","getMinutes","Showtime","now","onDateSelect","showtimeId","showtimeDate","Chip","label","ShowtimeDateView","showtimeHours","showtimes","showtime","start_at","ShowTimeMonthView","showtimesFilteredByDay","dates","sort","b","filteredShowtimes","expanded","month","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","ShowtimeList","showtimesDates","showtimesMonth","showtimeMonths","uniq","convertDatesToDays","uniqueDates","showName","IndividualSeat","x","y","useState","open","setOpen","reservedSeatChecker","seatsTaken","find","onClose","selectedSeatChecker","buttonClassResolver","onSitSelect","Seats","formattedDate","seatsGridDrawer","seats","createEmpty","index","s","verticalAlign","rowLength","rows","borderCollapse","Reservation","setSubmitionCompleted","seatsArray","seatId","baseProps","initialValues","email","customer","setSubmitting","reservation","post","then","res","console","log","catch","err","validationSchema","Yup","shape","required","values","touched","errors","isValid","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","noValidate","autoComplete","aria-controls","TextField","error","onBlur","helperText","type","Content","contentViews","selectedMovie","onShowtimeSelect","SeatSelectedContainer","onDelete","seatContainer","containerVisible","maxHeight","toggleVisibility","IconButton","aria-label","cursor","onSeatsConfirmation","LoadingOverlay","loadingOverlayDiv","CircularProgress","App","prevState","handleCityRequest","get","params","countries","query","onSearchSubmit","toDate","setDate","toISOString","city_ids","time_to","getMovies","movie_id","getShowtimes","getSits","CSSTransition","in","appear","timeout","classNames","ThemeWrapper","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","warning","ThemeProvider","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cbb01de5.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://api.internationalshowtimes.com/v4',\n    headers: {\n        Authorization: \"Token token=fcuXruYxzbguozqM7O7wg2sneFGBF0LD\"\n    }\n});\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://api-cinemaapp.herokuapp.com/api/bookings',\n});\n","export const selectedMovieStyle = (props) => {\n    const height = !props.date ? '140px' : '80px';\n\n\n    return {\n        background: `url(${props.poster}) no-repeat 50% 50% / cover`,\n        borderTopLeftRadius: '5px',\n        borderTopRightRadius: '5px',\n        height: height,\n        marginBottom: '20px',\n        display: 'flex',\n        alignItems: 'flex-end',\n        position: 'relative'\n    }\n};\n\nexport const offPositionStyling = (seatsCount) => {\n\n    const handleToggleView = seatsCount ? 'translateY(5%)' : 'translateY(150%)';\n\n    return {\n        position: 'absolute',\n        bottom: '0',\n        left: '0',\n        width: '100%',\n        minHeight: '10%',\n        margin: '0 auto',\n        zIndex: 5,\n        transform: handleToggleView\n    }\n};\n\nexport const reservationForm = {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    margin: '0 auto'\n};\n\nexport const positionStyle = {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    flexFlow: 'column nowrap',\n    width: '100%',\n    height: '90%'\n};\n\nexport const loadingOverlay = {\n    position: 'absolute',\n    display: 'flex',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    flexFlow: 'row nowrap',\n    background: 'rgba(39, 41, 50, 0)',\n    zIndex: 3,\n    width: '100%',\n    height: '90%'\n};\n\nexport const contentWrapper = (selectedSeatsCount, pageView) => {\n    const landscapeView = (window.innerHeight <= 420 && (window.innerWidth > 419 && window.innerWidth < 834)) ? '75px' : '55px';\n\n    return {\n        height: '100%',\n        width: '95%',\n        padding: '20px 0',\n        zIndex: 2,\n        boxSizing: 'border-box',\n        overflowY: 'auto',\n        marginBottom: selectedSeatsCount && (pageView !== 0b1000) ? landscapeView : 'unset'\n    }\n};\n\nexport const formStyles = {\n    display: 'flex',\n    flexFlow: 'row nowrap',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    alignContent: 'center'\n};\n\nexport const overflowDiv = {\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    zIndex: '2',\n    overflow: 'auto'\n};\n\nexport const rowStyles = {\n    borderSpacing: '5px'\n};\n","import React, {Component, createContext} from \"react\";\n\nexport const SeatsSelectedContext = createContext();\n\nclass SeatsSelectedContextProvider extends Component {\n    state = {\n        seatsSelected: []\n    };\n\n\n    toggleSeatsBeingSelected = (value) => {\n        this.setState({seatsBeingSelected: value})\n    };\n\n    onSeatSelect = (seatSelected) => {\n        this.setState({seatsSelected: [...this.state.seatsSelected, seatSelected]});\n    };\n\n    onSeatRemove = (seatSelected) => {\n        const filteredSeatsTakenArray = this.state.seatsSelected.filter(seat => !(seat.row === seatSelected.row && seat.column === seatSelected.column));\n        this.setState({seatsSelected: [...filteredSeatsTakenArray]});\n    };\n\n    clearSelectedSeats = () => {\n        this.setState({seatsSelected: []})\n    };\n\n    render() {\n        return (\n            <SeatsSelectedContext.Provider\n                value={{\n                    ...this.state,\n                    toggleSeatsBeingSelected: this.toggleSeatsBeingSelected,\n                    onSeatSelect: this.onSeatSelect,\n                    onSeatRemove: this.onSeatRemove,\n                    clearSelectedSeats: this.clearSelectedSeats\n                }}\n            >\n                {this.props.children}\n            </SeatsSelectedContext.Provider>\n        );\n    }\n}\n\nexport default SeatsSelectedContextProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport {formStyles} from \"../../styles\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {SeatsSelectedContext} from \"../contexts/SeatsSelectedContext\";\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            cities: [],\n            isError: false\n        };\n    }\n\n    static contextType = SeatsSelectedContext;\n\n    citiesItems = [];\n\n    onFormSubmit = (event) => {\n        event.preventDefault();\n        const {clearSelectedSeats} = this.context;\n        clearSelectedSeats();\n        this.props.onSubmit(this.state.term);\n    };\n\n    handleFindCurrentLocation = () => {\n\n        const successfulyLocated = (position) => {\n            this.setState({isError: false});\n            const _ = require('lodash');\n\n            const fractionDigit = 3;\n\n            const lat = position.coords.latitude.toFixed(fractionDigit);\n            const lon = position.coords.longitude.toFixed(fractionDigit);\n            const location = {lat: +lat, lon: +lon};\n\n\n            const proximity = this.state.cities.map(city => {\n                return {\n                    id: city.id,\n                    lat: Math.abs(city.lat.toFixed(fractionDigit) - location.lat),\n                    lon: Math.abs(city.lon.toFixed(fractionDigit) - location.lon)\n                }\n            });\n\n            const closest = _.sortBy(proximity, ['lat', 'lon'])[0].id;\n            this.setState({term: closest});\n        };\n\n        const errorLocating = () => {\n            this.setState({isError: true})\n        };\n\n        navigator.geolocation.getCurrentPosition(position => {\n                successfulyLocated(position);\n            },\n            () => errorLocating()\n        );\n\n\n    };\n\n    handlePopulateSelect = () => {\n        const _ = require('lodash');\n        const sortedCities = _.sortBy(this.state.cities, \"name\");\n        this.citiesItems = [...sortedCities.map(city => {\n            return (\n                <MenuItem\n                    key={city.id}\n                    value={city.id}\n                    button={true}\n                >\n                    {city.name}\n                </MenuItem>\n            );\n        })];\n    };\n\n    componentDidMount = async () => {\n        const getCities = await this.props.getCities('');\n        this.setState({\n            cities: [...getCities.data.cities]\n        });\n    };\n\n    render() {\n        this.handlePopulateSelect();\n        const tooltipResolverBasedOnError = this.state.isError ? 'Seems there was a trouble while getting your location, ' +\n            'either enable geolocation in your browser or try selecting your city manually' : 'Select city based on your current location';\n        const styleResolverBasedOnError = this.state.isError ? {\n            marginRight: '5px',\n            background: 'rgb(247,63,85)',\n            color: '#ffffff'\n        } : {marginRight: '5px'};\n        const iconResolverBasedOnError = this.state.isError ? 'location_disabled' : 'my_location';\n\n        return (\n            <div>\n                <form>\n                    <div style={formStyles} className=\"formClass\">\n                        <Tooltip\n                            title={tooltipResolverBasedOnError}\n                        >\n                            <span>\n                            <Button\n                                disabled={!this.citiesItems.length}\n                                onClick={this.handleFindCurrentLocation}\n                                style={styleResolverBasedOnError}\n                                variant=\"contained\"\n                                size={\"large\"}\n                                color='primary'\n                            >\n                                <i className=\"material-icons\">\n                                    {iconResolverBasedOnError}\n                                </i>\n                            </Button>\n                            </span>\n                        </Tooltip>\n                        <FormControl\n                            disabled={!this.citiesItems.length}\n                            size={\"small\"}\n                            fullWidth={true}\n                            variant=\"filled\"\n                        >\n                            <InputLabel>Select a city</InputLabel>\n                            <Select value={this.state.term}\n                                    onChange={(e) => this.setState({term: e.target.value})}>\n                                {this.citiesItems}\n                            </Select>\n                        </FormControl>\n                        <Tooltip\n                            title=\"See currently played movies\"\n                        >\n                            <span>\n                            <Button\n                                disabled={!this.state.term}\n                                onClick={this.onFormSubmit}\n                                style={{marginLeft: '5px'}}\n                                variant=\"contained\"\n                                size={\"large\"}\n                                color=\"secondary\"\n                            >\n                                <i className=\"material-icons\">\n                                    local_movies\n                                </i>\n                            </Button>\n                            </span>\n                        </Tooltip>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    onSubmit: PropTypes.func\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropType from 'prop-types';\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\n\nclass Movie extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movieName: '',\n            movieId: 0,\n            poster: ''\n        };\n    }\n\n    onMovieSelect = () => {\n        // setState accepts callback when it finishes updateing state\n        // so we call onSelect, once state was updated\n        this.setState({\n            movieName: this.props.title,\n            movieId: this.props.id,\n            poster: this.moviePosterChecker()\n        }, () => this.props.onSelect(this.state.movieId, this.state.movieName, this.moviePosterChecker()));\n    };\n\n    moviePosterChecker = () => {\n        return (!this.props.poster) ? '/img/noposter.jpg' : this.props.poster;\n    };\n\n    render() {\n        return (\n            <div style={{margin: '20px auto'}}>\n                <Card>\n                    <CardActionArea onClick={this.onMovieSelect}>\n                        <CardMedia\n                            component=\"img\"\n                            image={this.moviePosterChecker()}\n                            title={this.props.title}\n                            height=\"100\"\n                        />\n                        <CardContent\n                            classes={{root: 'cardBg card'}}\n                        >\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                                {this.props.title}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <CardActions\n                        classes={{root: 'cardBg movies'}}\n                    >\n                        <Button\n                            onClick={this.onMovieSelect}\n                            size=\"small\"\n                            color=\"secondary\"\n                            className='gradientText'>\n                            Check showtimes\n                        </Button>\n\n                    </CardActions>\n                </Card>\n            </div>\n        );\n    }\n}\n\nMovie.propTypes = {\n    title: PropType.string,\n    id: PropType.string,\n    poster: PropType.string,\n    onSelect: PropType.func\n};\n\nexport default Movie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Movie from './Movie';\n\nconst MovieList = (props) => {\n    const movies = props.movies.map((movie) => {\n        return <Movie\n            key={movie.id}\n            id={movie.id}\n            poster={movie.poster_image_thumbnail}\n            title={movie.title}\n            onSelect={props.onSelect}\n        />;\n    });\n\n\n    const moviesFoundCount = () => {\n        if (movies.length) {\n            return (\n                <h3>Found {movies.length} item{movies.length === 1 ? '' : 's'}</h3>\n            )\n        }\n    };\n\n    const movieScreen = () => {\n        if (!movies.length && props.city === '') {\n            return (\n                <div style={{textAlign: 'center'}}>\n                    <img\n                        src=\"/img/seat.svg\"\n                        className=\"startImage\"\n                        alt=\"Search a city to look for movies\"\n                    />\n                    <h2 style={{fontSize: '1.5rem'}}>\n                        Select a city and reserve\n                        <span className='gradientText'>a seat today :)</span>\n                    </h2>\n                </div>\n            )\n        } else if (!movies.length && props.city !== '') {\n            return (\n                <div style={{textAlign: 'center'}}>\n                    <img\n                        src=\"/img/no-movie.svg\"\n                        className=\"startImage\"\n                        alt=\"Search a city to look for movies\"\n                    />\n                    <h2 style={{fontSize: '1.5rem'}}>\n                        No showtimes avaiable at this city.\n                    </h2>\n                </div>\n            )\n        }\n    };\n\n\n    return (\n        <div>\n            {moviesFoundCount()}\n            {movieScreen()}\n            <div className='moviesGrid'>\n                {movies}\n            </div>\n        </div>\n    );\n};\n\nMovieList.propTypes = {\n    city: PropTypes.string,\n    movies: PropTypes.array,\n    onSelect: PropTypes.func\n};\n\nexport default MovieList;\n","import CircularProgress from \"@material-ui/core/CircularProgress\";\nimport React from \"react\";\n\nexport const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nexport const rowLetters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\n    \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"Aa\", \"Ab\", \"Ac\", \"Ad\"];\n\nexport const dateFormatted = (props) => {\n    const date = new Date(props.date);\n    const dateOrdinal = () => {\n        const dateLastDigit = +date.getDate().toString()[date.getDate().toString().length - 1];\n        switch (dateLastDigit) {\n            case 1:\n                return 'st';\n            case 2:\n                return 'nd';\n            case 3:\n                return 'rd';\n            default:\n                return 'th'\n        }\n    };\n    return `${monthNames[date.getMonth()]} ${date.getDate()}${dateOrdinal()}`;\n};\n\nexport const showTimeHourFormatted = (props) => {\n    const showtimeHour = new Date(props.date);\n    return `${showtimeHour.getHours()}:${(showtimeHour.getMinutes().toString().length === 1)\n        ? `0${showtimeHour.getMinutes()}`\n        : showtimeHour.getMinutes()}`;\n};\n\nexport const loading = () => {\n    return (\n        <div style={{margin: '20px auto', textAlign: 'center'}}>\n            <CircularProgress size={170} color=\"secondary\"/>\n        </div>\n    );\n};\n","import React from 'react';\nimport PropType from 'prop-types';\nimport Chip from \"@material-ui/core/Chip\";\nimport {showTimeHourFormatted} from \"../constants\";\n\nclass Showtime extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            showtimeId: '',\n            showtimeDate: ''\n        };\n    }\n\n\n\n    disabled = Date.now() > new Date(this.props.date);\n\n\n    onDateSelect = () => {\n        this.setState({\n            showtimeId: this.props.id,\n            showtimeDate: this.props.date\n        }, () => this.props.onSelect(this.state.showtimeId,\n            this.state.showtimeDate));\n    };\n\n\n    render() {\n        return <Chip\n            onClick={this.onDateSelect}\n            label={showTimeHourFormatted(this.props)}\n            title={`${showTimeHourFormatted(this.props)} - ${this.props.title}`}\n            poster={this.props.poster}\n            date={this.props.date}\n            disabled={this.disabled}\n        />\n    }\n}\n\nShowtime.propTypes = {\n    title: PropType.string,\n    poster: PropType.string,\n    id: PropType.string,\n    date: PropType.string,\n    onSelect: PropType.func\n};\n\nexport default Showtime;\n","import React from \"react\";\nimport Showtime from \"./Showtime\";\n\n\nconst ShowtimeDateView = (props) => {\n    const showtimeHours = props.showtimes.map(showtime => {\n        return (\n            <Showtime\n                key={showtime.id}\n                id={showtime.id}\n                date={showtime.start_at}\n                title={props.title}\n                poster={props.poster}\n                onSelect={props.onSelect}\n            />\n        );\n    });\n\n    return (\n        <div className='dayCard'>\n            <div className='day'>\n                {props.date}\n            </div>\n            <div className='hours'>\n                {showtimeHours}\n            </div>\n        </div>\n    );\n};\n\nexport default ShowtimeDateView;\n","import React from \"react\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ShowtimeDateView from \"./ShowtimeDateView\";\nimport {monthNames} from \"../constants\";\n\nconst ShowTimeMonthView = (props) => {\n\n    const sortedDates = props.dates.sort((a, b) => a - b);\n\n    const showtimesFilteredByDay = sortedDates.map(date => {\n\n        const filteredShowtimes = props.showtimes.filter(showtime => new Date(showtime.start_at).getDate() === date);\n        return (\n            <ShowtimeDateView\n                key={date}\n                showtimes={filteredShowtimes}\n                date={date}\n                title={props.title}\n                poster={props.poster}\n                onSelect={props.onSelect}\n            />\n        );\n    });\n\n    const expanded = new Date(Date.now()).getMonth() === props.month;\n\n    return (\n        <ExpansionPanel defaultExpanded={expanded}>\n            <ExpansionPanelSummary\n                expandIcon={<i className=\"material-icons\">\n                    expand_more\n                </i>}\n            >\n                <Typography>{monthNames[props.month]}</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails\n                classes={{root: 'cardBg'}}\n            >\n                {showtimesFilteredByDay}\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n};\n\nexport default ShowTimeMonthView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ShowTimeMonthView from \"./ShowtimeMonthView\";\nimport {selectedMovieStyle} from \"../../../styles\";\n\nconst ShowtimeList = (props) => {\n    const _ = require('lodash');\n\n    const showtimesDates = props.showtimes.map(showtime => new Date(showtime.start_at));\n    const showtimesMonth = showtimesDates.map(date => date.getMonth());\n    const uniqueMonths = _.uniq(showtimesMonth);\n\n    const showtimeMonths = uniqueMonths.map(month => {\n        const filteredShowtimes = props.showtimes.filter(showtime => new Date(showtime.start_at).getMonth() === month);\n        const convertDatesToDays = showtimesDates.map(date => date.getDate());\n        const uniqueDates = _.uniq(convertDatesToDays);\n        return (\n            <ShowTimeMonthView\n                key={month}\n                month={month}\n                showtimes={filteredShowtimes}\n                dates={uniqueDates}\n                title={props.showName}\n                poster={props.poster}\n                onSelect={props.onSelect}\n            />\n        )\n    });\n\n\n    return (\n        <div>\n            <div style={selectedMovieStyle(props)}>\n                <div className='shader bottom poster'>\n                    <h2>{props.showName}</h2>\n                </div>\n            </div>\n            {showtimeMonths}\n        </div>\n    );\n};\n\nShowtimeList.propTypes = {\n    showtimes: PropTypes.array,\n    showName: PropTypes.string,\n    poster: PropTypes.string,\n    onSelect: PropTypes.func\n};\n\nexport default ShowtimeList;\n","import React from \"react\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {rowLetters} from \"../constants\";\nimport PropType from \"prop-types\";\n\nconst IndividualSeat = (props) => {\n\n    const [open, setOpen] = React.useState(false);\n\n    const selectedSeatChecker = (x, y) => {\n        return (props.seatsSelected.find(seat => seat.row === x && seat.column === y)) ? 'selected' : '';\n    };\n\n    const reservedSeatChecker = (x, y) => {\n        return (props.seatsTaken.find(seat => seat.row === x && seat.column === y));\n    };\n\n    const tooltipResolver = (x, y) => {\n        return `${rowLetters[x]}${y + 1}`\n    };\n\n    const handleTooltipOpen = () => {\n        setOpen(true);\n    };\n\n    const handleTooltipClose = () => {\n        setOpen(false);\n    };\n\n    const buttonClassResolver = (x, y) => {\n        const disabled = reservedSeatChecker(x, y) ? 'disabled' : '';\n        return `animate ${selectedSeatChecker(x, y)} ${disabled}`\n    };\n\n    return (\n\n        <Tooltip\n            open={open}\n            onClose={handleTooltipClose}\n            title={tooltipResolver(props.x, props.y)}\n        >\n            <button\n                className={buttonClassResolver(props.x, props.y)}\n                disabled={reservedSeatChecker(props.x, props.y)}\n                onClick={(event) => {\n                    handleTooltipOpen();\n                    props.onSitSelect(event, props.x, props.y);\n                }}\n            >\n                {props.y + 1}\n            </button>\n        </Tooltip>\n    );\n};\n\nIndividualSeat.propTypes = {\n    x: PropType.number,\n    y: PropType.number,\n    seatsTaken: PropType.array,\n    seatsSelected: PropType.array,\n    onSitSelect: PropType.func\n};\n\nexport default IndividualSeat;\n","import React from 'react';\nimport PropType from 'prop-types';\nimport {overflowDiv, rowStyles, selectedMovieStyle} from \"../../../styles\";\nimport {dateFormatted, rowLetters, showTimeHourFormatted} from \"../constants\";\nimport IndividualSeat from \"./IndividualSeat\";\nimport {SeatsSelectedContext} from \"../../contexts/SeatsSelectedContext\";\n\nclass Seats extends React.Component {\n\n\n    state = {\n        seatsTaken: []\n    };\n\n    static contextType = SeatsSelectedContext;\n\n\n    formattedDate = () => {\n        return (\n            <h3 className={'gradientText'}>\n                {showTimeHourFormatted(this.props)} {dateFormatted(this.props)}\n            </h3>\n        );\n    };\n\n\n    onSitSelect = (event, x, y) => {\n        const {seatsSelected, onSeatSelect, onSeatRemove} = this.context;\n        const seatSelected = {row: x, column: y};\n\n        if (!seatsSelected.find(seat => seat.row === seatSelected.row && seat.column === seatSelected.column)) {\n            onSeatSelect(seatSelected)\n        } else {\n            onSeatRemove(seatSelected)\n        }\n    };\n\n    createEmpty(seats) {\n        const {seatsSelected, toggleSeatsBeingSelected} = this.context;\n        for (let x = 0; x < this.props.seats.rowLength; x++) {\n            seats[x] = [];\n            for (let y = 0; y < this.props.seats.rows; y++) {\n                seats[x][y] = (\n                    <IndividualSeat\n                        x={x}\n                        y={y}\n                        seatsTaken={this.state.seatsTaken}\n                        seatsSelected={seatsSelected}\n                        onSitSelect={this.onSitSelect}\n                        toggleSeatsBeingSelected={toggleSeatsBeingSelected}\n                    />\n                );\n            }\n        }\n    }\n\n    seatsGridDrawer = () => {\n        const seats = [];\n        this.createEmpty(seats);\n        let key = 0;\n\n        return seats.map((row, index) => {\n            return (\n                <tr style={rowStyles} key={key++}>\n                    <td className='gradientText'>\n                        {rowLetters[index]}\n                    </td>\n                    {row.map((s) => {\n                        return <td style={{verticalAlign: 'middle'}} key={key++}>{s}</td>;\n                    })}\n                </tr>\n            );\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div style={selectedMovieStyle(this.props)}>\n                    <div className='shader bottom poster'>\n                        <h2>{this.props.title}</h2>\n                        {this.formattedDate()}\n                    </div>\n                </div>\n                <div style={overflowDiv}>\n                    <table id='seatsTable' style={{borderCollapse: 'separate'}}>\n                        <tbody>\n                        {this.seatsGridDrawer()}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            seatsTaken: [...this.props.seats.seatsTaken]\n        })\n    }\n\n}\n\nSeats.propTypes = {\n    seats: PropType.object,\n    title: PropType.string,\n    poster: PropType.string,\n};\n\nexport default Seats;\n","import React, {useState} from 'react';\nimport PropType from 'prop-types';\nimport {reservationForm, selectedMovieStyle} from \"../../../styles\";\nimport {dateFormatted, rowLetters, showTimeHourFormatted} from \"../constants\";\nimport Chip from \"@material-ui/core/Chip\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport reservation from \"../../../api/reservation\";\nimport * as Yup from 'yup';\nimport {Formik} from \"formik\";\n\nconst Reservation = (props) => {\n\n    const [isSubmitionCompleted, setSubmitionCompleted] = useState(false);\n\n\n    const formattedDate = () => {\n        return (\n            <h3 className={'gradientText'}>\n                {showTimeHourFormatted(props)} {dateFormatted(props)}\n            </h3>\n        );\n    };\n\n\n    const seatsSelected = () => {\n        return props.seatsSelected.map(seat => {\n            const seatId = `${rowLetters[seat.row]}${seat.column + 1}`;\n            return (\n                <Chip\n                    style={{marginRight: '5px', marginBottom: '3px'}}\n                    key={seatId}\n                    label={seatId}\n                    title={seatId}\n                />\n            );\n        })\n    };\n\n    const seatsArray = () => {\n        return (\n            <div className='seatsArray'>\n                {seatsSelected()}\n            </div>\n        )\n    };\n\n    const baseProps = props;\n    return (\n        <>\n            <Formik\n                initialValues={{email: '', name: ''}}\n                onSubmit={async (customer, {setSubmitting}) => {\n\n                    setSubmitting(true);\n\n                    await reservation.post(`/`, {\n                        customer,\n                        showtimeId: baseProps.id,\n                        seats: baseProps.seatsSelected\n                    })\n                        .then(res => {\n                            setSubmitionCompleted(true);\n                            console.log(res);\n                        })\n                        .catch(err => console.log(err))\n                }}\n\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email()\n                        .required('Required'),\n                    name: Yup.string()\n                        .required('Required')\n                })}\n            >\n\n                {(props) => {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        isValid,\n                        dirty,\n                        isSubmitting,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                    } = props;\n\n                    return (\n                        <div>\n                            <div style={selectedMovieStyle(baseProps)}>\n                                <div className='shader bottom poster'>\n                                    <h2>{baseProps.title}</h2>\n                                </div>\n                            </div>\n\n                            <form\n                                onSubmit={handleSubmit}\n                                noValidate\n                                autoComplete=\"off\"\n                                style={reservationForm}\n                            >\n                                <h2 style={{marginBottom: '20px'}}>Reservation for</h2>\n                                {formattedDate()}\n                                <ExpansionPanel\n                                    defaultExpanded={true}\n                                    style={{marginBottom: '20px'}}\n                                >\n                                    <ExpansionPanelSummary\n                                        expandIcon={\n                                            <i className=\"material-icons\">\n                                                expand_more\n                                            </i>\n                                        }\n                                        aria-controls=\"panel1a-content\"\n                                        id=\"panel1a-header\"\n                                    >\n                                        Selected seats:\n                                    </ExpansionPanelSummary>\n                                    <ExpansionPanelDetails classes={{root: 'cardBg'}}>\n                                        {seatsArray(props.seatsSelected)}\n                                    </ExpansionPanelDetails>\n                                </ExpansionPanel>\n\n                                <TextField\n                                    required\n                                    error={errors.name && touched.name}\n                                    fullWidth={true}\n                                    autoComplete={'name'}\n                                    style={{marginBottom: '20px'}}\n                                    id=\"name\"\n                                    label=\"Name\"\n                                    value={values.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    helperText={(errors.name && touched.name) && errors.name}\n                                    variant={\"outlined\"}\n                                />\n\n                                <TextField\n                                    required\n                                    fullWidth={true}\n                                    error={errors.email && touched.email}\n                                    autoComplete={'email'}\n                                    style={{marginBottom: '20px'}}\n                                    id=\"email\"\n                                    label=\"E-mail\"\n                                    value={values.email}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    helperText={(errors.email && touched.email) && errors.email}\n                                    variant={\"outlined\"}\n                                />\n\n                                <Button\n                                    variant=\"contained\"\n                                    size={\"large\"}\n                                    color=\"secondary\"\n                                    type='submit'\n                                    style={{marginBottom: '20px'}}\n                                    disabled={!dirty || !isValid || isSubmitting}\n                                >\n                                    <i className=\"material-icons\" style={{marginRight: '5px'}}>\n                                        event_seat\n                                    </i>\n                                    Reserve your seats\n                                </Button>\n                            </form>\n                        </div>\n                    );\n                }}\n            </Formik>\n        </>\n    )\n        ;\n};\n\n\nReservation.propTypes = {\n    title: PropType.string,\n    date: PropType.string,\n    id: PropType.string,\n    seatsSelected: PropType.array\n};\n\nexport default Reservation;\n","import React, {Component} from \"react\";\nimport PropType from 'prop-types';\n\nimport MovieList from \"./movie/MovieList\";\nimport ShowtimeList from \"./showtimes/ShowtimeList\";\nimport Seats from \"./seats/Seats\";\nimport Reservation from \"./reservation/Reservation\";\nimport {contentWrapper, positionStyle} from \"../../styles\";\nimport {SeatsSelectedContext} from \"../contexts/SeatsSelectedContext\";\n\nclass Content extends Component {\n    static contextType = SeatsSelectedContext;\n\n    contentViews = () => {\n        const {seatsSelected} = this.context;\n\n        if (this.props.pageView) {\n            switch (this.props.pageView) {\n                case 0b0001:\n                    return (\n                        <MovieList\n                            city={this.props.city}\n                            movies={this.props.movies}\n                            onSelect={this.props.onMovieSelect}\n                        />\n                    );\n                case 0b0010:\n                    return (\n                        <ShowtimeList\n                            showtimes={this.props.showtimes}\n                            showName={this.props.selectedMovie}\n                            poster={this.props.poster}\n                            onSelect={this.props.onShowtimeSelect}\n                        />\n                    );\n                case 0b0100:\n                    return (\n                        <Seats\n                            seats={this.props.seats}\n                            poster={this.props.poster}\n                            date={this.props.showtimeDate}\n                            title={this.props.selectedMovie}\n                        />\n                    );\n                case 0b1000:\n                    return (\n                        <Reservation\n                            title={this.props.selectedMovie}\n                            date={this.props.showtimeDate}\n                            id={this.props.showtimeId}\n                            poster={this.props.poster}\n                            seatsSelected={seatsSelected}\n                        />\n                    );\n                default:\n                    return null;\n            }\n        }\n    };\n\n    render() {\n        const {seatsSelected} = this.context;\n        return (\n            <div style={positionStyle} className='landscapeMob'>\n                <div className=\"shader\"/>\n                <div className='maxHeight' style={contentWrapper(seatsSelected.length, this.props.pageView)}>\n                    {this.contentViews()}\n                </div>\n                <div className=\"shader bottom\"/>\n            </div>\n        );\n    }\n\n}\n\nContent.propTypes = {\n    pageView: PropType.number,\n    seats: PropType.object,\n    seatsSelected: PropType.array,\n    poster: PropType.string,\n\n    movies: PropType.array,\n    selectedMovie: PropType.string,\n\n    showtimes: PropType.array,\n    showtimeDate: PropType.string,\n    showtimeId: PropType.string,\n\n    onMovieSelect: PropType.func,\n    onShowtimeSelect: PropType.func,\n};\n\nexport default Content;\n","import React, {Component} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport PropType from \"prop-types\";\nimport {rowLetters} from \"./constants\";\nimport Chip from \"@material-ui/core/Chip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {offPositionStyling} from \"../../styles\";\nimport {SeatsSelectedContext} from \"../contexts/SeatsSelectedContext\";\n\nclass SeatSelectedContainer extends Component {\n\n    static contextType = SeatsSelectedContext;\n\n\n    seatsSelected = () => {\n        const {onSeatRemove, seatsSelected} = this.context;\n        return seatsSelected.map(seat => {\n            const seatId = `${rowLetters[seat.row]}${seat.column + 1}`;\n            return (\n                <Chip\n                    style={{marginRight: '5px', marginBottom: '3px'}}\n                    onDelete={() => onSeatRemove(seat)}\n                    key={seatId}\n                    label={seatId}\n                    title={seatId}\n                />\n            );\n        })\n    };\n\n    seatsArray = () => {\n        return (\n            <div className='seatsArray'>\n                {this.seatsSelected()}\n            </div>\n        )\n    };\n\n\n    seatContainer = () => {\n        const {seatsSelected} = this.context;\n        return (\n            <div className='animate landscapeContainer' style={offPositionStyling(seatsSelected.length)}>\n                <div style={this.props.containerVisible ? {maxHeight: '100%'} : {maxHeight: '90px'}}\n                     className='selectedSeatContainer animate'>\n                    <div>\n                        <div onClick={this.props.toggleVisibility}>\n                            <IconButton aria-label=\"delete\">\n                                <i style={this.props.containerVisible ? {transform: 'rotate(0deg)'} : {transform: 'rotate(180deg)'}}\n                                   className=\"material-icons animate\">\n                                    expand_more\n                                </i>\n                            </IconButton>\n                            <h3 className='gradientText' style={{fontSize: '1rem', cursor: 'pointer'}}>Selected\n                                seats</h3>\n                        </div>\n                        {this.props.containerVisible ? this.seatsArray(seatsSelected) : null}\n                    </div>\n                    <Tooltip title=\"Reserve selected seats\">\n                        <Button onClick={this.props.onSeatsConfirmation} variant=\"contained\" color=\"secondary\">\n                            <i className=\"material-icons\">\n                                event_seat\n                            </i>\n                        </Button>\n                    </Tooltip>\n                </div>\n            </div>\n        );\n    };\n\n\n    render() {\n        const {seatsSelected} = this.context;\n        return seatsSelected.length && this.props.pageView !== 0b00001000 ? this.seatContainer() : null;\n    }\n}\n\nSeatSelectedContainer.propTypes = {\n    pageView: PropType.number,\n    containerVisible: PropType.bool,\n    toggleVisibility: PropType.func,\n    onSeatsConfirmation: PropType.func\n};\n\nexport default SeatSelectedContainer;\n","import React from \"react\";\nimport {loadingOverlay} from \"../../styles\";\nimport {loading} from \"./constants\";\n\nconst LoadingOverlay = (props) => {\n\n\n    const loadingOverlayDiv = (\n        <div style={loadingOverlay} className='animate'>\n            <div>{loading()}</div>\n        </div>\n    );\n\n    return !props.pageView ? loadingOverlayDiv : null\n\n};\n\nexport default LoadingOverlay;\n","import React, {Component} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport '../styles/viewAnimation.css'\n\nimport showtimes from '../api/showtimes';\nimport reservation from '../api/reservation';\n\nimport SearchBar from './contentViews/SearchBar';\nimport Content from \"./contentViews/Content\";\nimport SeatSelectedContainer from \"./contentViews/SeatSelectedContainer\";\nimport SeatsSelectedContextProvider from \"./contexts/SeatsSelectedContext\";\nimport LoadingOverlay from \"./contentViews/LoadingOverlay\";\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cities: '',\n            movies: [],\n            selectedMovie: '',\n            showtimes: [],\n            showtimeId: '',\n            showtimeDate: '',\n            poster: '',\n            seats: {},\n            customer: {},\n            seatsTaken: [],\n            containerVisible: true,\n            // Viewing states\n            pageView: 0b0001\n        };\n    }\n\n\n    toggleVisibility = () => {\n        this.setState(prevState => ({\n            containerVisible: !prevState.containerVisible\n        }));\n    };\n\n    handleCityRequest = async term => {\n        return await showtimes.get('/cities', {\n            params: {\n                countries: 'pl',\n                query: term\n            }\n        });\n    };\n\n    onSearchSubmit = async term => {\n        this.setState({\n            pageView: 0b0000\n        });\n\n        let toDate = new Date();\n        toDate.setDate(toDate.getDate() + 7);\n        toDate = toDate.toISOString();\n\n        const getMovies = await showtimes.get('/movies', {\n            params: {\n                city_ids: term,\n                time_to: toDate\n            }\n        });\n\n        this.setState({\n            movies: getMovies.data.movies,\n            cities: term,\n            pageView: 0b0001\n        });\n    };\n\n    onMovieSelect = async (movieId, movieName, poster) => {\n        this.setState({\n            pageView: 0b0000\n        });\n\n        const getShowtimes = await showtimes.get('/showtimes', {\n            params: {\n                countries: 'pl',\n                city_ids: this.state.cities,\n                movie_id: movieId\n            }\n        });\n\n        this.setState({\n            selectedMovie: movieName,\n            showtimes: getShowtimes.data.showtimes,\n            poster: poster,\n            pageView: 0b0010\n        });\n    };\n\n    onShowtimeSelect = async (showtimeId, showtimeDate) => {\n        this.setState({\n            pageView: 0b0000\n        });\n\n        const getSits = await reservation.get(`/showtime/${showtimeId}`);\n\n        this.setState({\n            showtimeId,\n            showtimeDate,\n            seats: getSits.data,\n            pageView: 0b00000100\n        });\n    };\n\n\n    onSeatsConfirmation = () => {\n        this.setState({\n            pageView: 0b00001000\n        });\n    };\n\n\n    render() {\n        return (\n            <div>\n                <SeatsSelectedContextProvider>\n                    <div>\n                        <SearchBar getCities={this.handleCityRequest}\n                                   onSubmit={this.onSearchSubmit}\n                        />\n                        <LoadingOverlay pageView={this.state.pageView}/>\n                        {/*<SwitchTransition>*/}\n                        <CSSTransition\n                            in={this.state.pageView !== 0b0000}\n                            appear={true}\n                            timeout={300}\n                            classNames=\"view\"\n                        >\n                            <Content\n                                city={this.state.cities}\n                                pageView={this.state.pageView}\n                                movies={this.state.movies}\n                                showtimes={this.state.showtimes}\n                                selectedMovie={this.state.selectedMovie}\n                                seats={this.state.seats}\n                                showtimeDate={this.state.showtimeDate}\n                                showtimeId={this.state.showtimeId}\n                                poster={this.state.poster}\n                                onMovieSelect={this.onMovieSelect}\n                                onShowtimeSelect={this.onShowtimeSelect}\n                            />\n                        </CSSTransition>\n                        {/*</SwitchTransition>*/}\n                    </div>\n                    <SeatSelectedContainer\n                        containerVisible={this.state.containerVisible}\n                        toggleVisibility={this.toggleVisibility}\n                        onSeatsConfirmation={this.onSeatsConfirmation}\n                        pageView={this.state.pageView}\n                    />\n                </SeatsSelectedContextProvider>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core\";\nimport App from \"../components/App\";\n\nclass ThemeWrapper extends Component {\n    theme = createMuiTheme({\n        palette: {\n            type: 'dark',\n            primary: {\n                light: 'rgba(126, 193, 209, 1)',\n                main: 'rgba(126, 193, 209, 1)',\n                dark: 'rgb(85,159,179)',\n                contrastText: 'rgba(39, 41, 50, 1)',\n            },\n            secondary: {\n                light: 'rgba(229, 247, 125, 1)',\n                main: 'rgb(193,208,113)',\n                dark: 'rgb(144,164,95)',\n                contrastText: 'rgba(39, 41, 50, 1)',\n            },\n            warning: {\n                light: 'rgb(247,63,85)',\n                main: 'rgb(247,41,47)',\n                dark: 'rgb(161,41,55)',\n                contrastText: 'rgba(255, 255, 255, 1)',\n            }\n        },\n    });\n\n    render() {\n        return (\n            <ThemeProvider theme={this.theme}>\n                <App/>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default ThemeWrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport ThemeWrapper from \"./theme/ThemeWrapper\";\n\nReactDOM.render(\n    <ThemeWrapper/>,\n    document.querySelector('#root')\n);\n"],"sourceRoot":""}